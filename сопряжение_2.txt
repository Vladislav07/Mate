Option Explicit
Public LT As Single
Public RT As Single
Public LB As Single
Public RB As Single


Public Property Get IsAlignAngle() As swMateAlign_e
  If (LT > 0 And RB > 0) Then
     IsAlignAngle = swMateAlignALIGNED
  ElseIf (LT < 0 And RB < 0) Then
     IsAlignAngle = swMateAlignANTI_ALIGNED
  End If
End Property


Public Property Get IsFlipedAngle() As Variant
   If (RT > 0 And LB < 0) Then
     IsFlipedAngle = False
   ElseIf (RT < 0 And LB > 0) Then
    IsFlipedAngle = True
   End If
End Property
-------------------------------------------------
Option Explicit

Public Fliped As Boolean
Public Align As swMateAlign_e
Public PlanComp As String
Public dist As Double
Public baseComp As String
Public childComp As String
Public mateType As swMateType_e
Public typeSelect As String
---------------------------------------------------


@Folder("Macro1")
Option Explicit
    Dim swApp As Object
    Dim swModel As SldWorks.ModelDoc2
    Dim swSelMgr As SldWorks.SelectionMgr
    Dim swComponent As SldWorks.Component2
    Dim boolstat As Boolean
    Dim swDocExt As ModelDocExtension
    Dim swAssemblyDoc As SldWorks.assemblyDoc
    Dim nameAssemble As String
    Dim plane(3) As String
    Dim angle As AngleLocation

Sub initial()
    Dim swMathUtil As SldWorks.MathUtility
    Dim listVecor(3) As MathVector
   
    Dim nChild As String
    Dim swTrChild As MathTransform
    Dim coord() As Double
    Dim listLocComp As Collection
    
    Dim ScaleOutb As Double
    Dim Xch As MathVector
    Dim Ych As MathVector
    Dim Zch As MathVector
    Dim TrObjOutch As MathVector
    Dim ScaleOutch As Double
    
    plane(0) = "Справа"
    plane(1) = "Сверху"
    plane(2) = "Спереди"
    
    Set swApp = Application.SldWorks
    Set swMathUtil = swApp.GetMathUtility()
    Set swModel = swApp.ActiveDoc
    Set swDocExt = swModel.Extension
    
    ScaleOutb = 0
    Set Xch = Nothing
    Set Ych = Nothing
    Set Zch = Nothing
    Set TrObjOutch = Nothing
    ScaleOutch = 0
    
    If swModel.GetType() <> swDocumentTypes_e.swDocASSEMBLY Then
      MsgBox "Can only add mate in an assembly"
      Exit Sub
    End If
    Set swAssemblyDoc = swModel
    nameAssemble = GetNameAssemble(swAssemblyDoc)
    
    Set swSelMgr = swModel.SelectionManager
    Set swComponent = swSelMgr.GetSelectedObject6(1, -1)
    If (IsEmpty(swComponent)) Then
      MsgBox "Select a component"
      Exit Sub
    End If
    nChild = swComponent.Name2
    
   
    
    Set swTrChild = swComponent.Transform2

    
    swTrChild.GetData Xch, Ych, Zch, TrObjOutch, ScaleOutch
    Set listVecor(0) = Xch
    Set listVecor(1) = Ych
    Set listVecor(2) = Zch
    
    'Debug.Print Xch.IArrayData
    
    coord = TrObjOutch.ArrayData
    p coord
   ' p Xch.ArrayData
   'p Ych.ArrayData
   ' p Zch.ArrayData
    Set listLocComp = New Collection
    Dim i As Integer
    Dim count As Integer
    Dim l As LocationComponent
    
     For i = 0 To 2
         Debug.Print plane(i)
         Debug.Print coord(i)
        
        Set l = New LocationComponent
        l.baseComp = nameAssemble
        l.childComp = nChild + "@" + nameAssemble
        IsFlipedAndAlign l, listVecor(i), coord(i)
        l.dist = Math.Abs(Math.Round(coord(i), 5))
        listLocComp.Add l
     Next i
     
        DeletingMateComp swComponent
        AddMate listLocComp
     
End Sub

Sub IsFlipedAndAlign(loc As LocationComponent, vector As MathVector, coord As Double)
    Dim orientation As Variant
    Dim temp As Single
    Dim y As Integer
    orientation = vector.ArrayData
    If (Math.Abs(Math.Round(coord * 10000)) < 1) Then
     coord = 0
    End If
    For y = 0 To 2
        If (Math.Abs(Math.Round(orientation(y) * 10000)) < 1) Then
        temp = 0
        Else
        temp = orientation(y)
        End If
        Debug.Print temp
        loc.mateType = swMateType_e.swMateDISTANCE
       
       Select Case temp
       Case Is = 1
            loc.PlanComp = plane(y)
            loc.Align = swMateAlign_e.swMateAlignALIGNED
            loc.typeSelect = "PLANE"
                If (coord > 0) Then
                    loc.Fliped = True
                ElseIf (coord < 0) Then
                    loc.Fliped = False
                End If
           
       Case Is = -1
            loc.Align = swMateAlign_e.swMateAlignANTI_ALIGNED
            loc.typeSelect = "PLANE"
            loc.PlanComp = plane(y)
                If (coord > 0) Then
                    loc.Fliped = False
                ElseIf (coord < 0) Then
                    loc.Fliped = True
                End If
            
       Case Is > 0
           loc.PlanComp = "Точка1@Исходная точка"
           loc.Align = swMateAlign_e.swMateAlignCLOSEST
           loc.typeSelect = "EXTSKETCHPOINT"
                If (coord > 0) Then
                     loc.Fliped = True
                ElseIf (coord < 0) Then
                     loc.Fliped = False
                End If
        
        Case Is < 0
           loc.PlanComp = "Точка1@Исходная точка"
           loc.Align = swMateAlign_e.swMateAlignCLOSEST
           loc.typeSelect = "EXTSKETCHPOINT"
                If (coord > 0) Then
                  loc.Fliped = False
                ElseIf (coord < 0) Then
                  loc.Fliped = True
                End If
        End Select
    Next y
   
End Sub

 Public Function AddMate(orientation As Collection)
   Dim i As Integer
   i = 0
   Dim locComp As LocationComponent
    For Each locComp In orientation
      AddMateToAssemble locComp, plane(i)
      i = i + 1
    Next
 End Function
        
        
     Function AddMateToAssemble(orientation As LocationComponent, planeCoord As String)
        Dim planePart As String
        Dim flipped As Boolean
        Dim Align As swMateAlign_e
        Dim distance As Double
        Dim mateError As Long
        Dim mateType As String
        
        planePart = orientation.PlanComp
        flipped = orientation.Fliped
        Align = orientation.Align
        distance = orientation.dist
        mateType = orientation.mateType

        
        Dim FirstSelection As String
        Dim SecondSelection As String
        Dim MateName As String
        Dim matefeature As Mate2
        
        FirstSelection = planePart & "@" & orientation.childComp
        SecondSelection = planeCoord & "@" & orientation.baseComp
        MateName = planeCoord
        swModel.ClearSelection2 (True)
        boolstat = swDocExt.SelectByID2(FirstSelection, orientation.typeSelect, 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionExtensive)
        boolstat = swDocExt.SelectByID2(SecondSelection, "PLANE", 0, 0, 0, True, 0, Nothing, swSelectOption_e.swSelectOptionDefault)
        Set matefeature = swAssemblyDoc.AddMate3(mateType, Align, flipped, distance, distance, distance, 0, 0, 0, 0, 0, False, mateError)
        'matefeature = MateName
        Debug.Print planeCoord
        Debug.Print mateError
        swAssemblyDoc.EditRebuild
     End Function
     
      
      Function GetNameAssemble(assemblyDoc As SldWorks.ModelDoc2) As String
          Dim strings As Variant
          Dim assemblyTitle As String
          assemblyTitle = swModel.GetTitle
          strings = Split(assemblyTitle, ".")
          GetNameAssemble = strings(0)
      End Function
      
          
     Sub DeletingMateComp(swComp As Component2)
           
       Dim Mates As Variant
       Dim SingleMate As Variant
       Dim swMate As SldWorks.Mate2
       Dim nameMate As String
       Dim boolstat As Boolean
       
        Mates = swComp.GetMates()
        If (Not IsEmpty(Mates)) Then
        For Each SingleMate In Mates
            If TypeOf SingleMate Is SldWorks.Mate2 Then
                Set swMate = SingleMate
                nameMate = SingleMate.name
                swModel.ClearSelection2 (True)
                boolstat = swDocExt.SelectByID2(nameMate, "MATE", 0, 0, 0, True, 1, Nothing, swSelectOption_e.swSelectOptionDefault)
                swModel.EditSuppress
            End If
         Next
        End If
    End Sub
      

         
    
Public Sub p(a As Variant)
Dim i As Variant

For Each i In a
Debug.Print i
Next i

End Sub

Public Function IsAngleLocation() As Boolean
    If Not IsEmpty(angle) Then
      Set IsAngleLocation = True
      Exit Function
    Else
      Set IsAngleLocation = False
      Exit Function
    End If
End Function
